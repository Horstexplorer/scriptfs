#summary Documentation for the procedures.h file

= procedures.h =



== Functions ==

void free_program( * program)
  *Release the memory allocated to a Program structure.*
 * get_program_from_string(const char * str)
  *Construct a Program structure from a string.*
void free_test( * test)
  *Release the memory allocated to a Test structure.*
 * get_test_from_string(const char * str)
  *Construct a Test structure from a string.*
void free_procedure( * procedure)
  *Release the memory allocated to a Procedure structure.*
 * get_procedure_from_string(const char * str)
  *Reads a procedure from a string.*
void free_procedures( * procedures)
  *Release the memory allocated to a Procedures structure.*

== Detailed Description ==




== Function Documentation ==

{{{
#void free_program   (
   * program  )
}}}
  Release the memory allocated to a Program structure.
  

*Parameters*:
  a   And two parameters. 
  b   Here's the second. 
*Returns*:
  And a return value!

{{{
# * get_program_from_string   (
  const char * str  )
}}}
  Construct a Program structure from a string.
  This function creates a Program structure from a string given as argument. The format of the string is described in [sfs_syntaxdoc Syntax of command-line]. The user is responsible for releasing the memory of the newly-allocated structure. 

Pointer to a newly-allocated Pointer structure, 0 if something went wrong

*Parameters*:
  a   And two parameters. 
  b   Here's the second. 
*Returns*:
  And a return value!

{{{
#void free_test   (
   * test  )
}}}
  Release the memory allocated to a Test structure.
  

*Parameters*:
  a   And two parameters. 
  b   Here's the second. 
*Returns*:
  And a return value!

{{{
# * get_test_from_string   (
  const char * str  )
}}}
  Construct a Test structure from a string.
  This function creates a Test structure from a string given as argument. The format of the string is described in [sfs_syntaxdoc Syntax of command-line]. The user is responsible for releasing the memory of the newly-allocated structure. 

Pointer to a newly-allocated Test structure, 0 if something went wrong

*Parameters*:
  a   And two parameters. 
  b   Here's the second. 
*Returns*:
  And a return value!

{{{
#void free_procedure   (
   * procedure  )
}}}
  Release the memory allocated to a Procedure structure.
  

*Parameters*:
  a   And two parameters. 
  b   Here's the second. 
*Returns*:
  And a return value!

{{{
# * get_procedure_from_string   (
  const char * str  )
}}}
  Reads a procedure from a string.
  This function is used to process the command-line `-p` arguments. One such argument is converted to a Procedure structure. The newly-allocated structure must be released by the user when it is not needed any longer. 

Pointer to a newly-created Procedure structure

*Parameters*:
  a   And two parameters. 
  b   Here's the second. 
*Returns*:
  And a return value!

{{{
#void free_procedures   (
   * procedures  )
}}}
  Release the memory allocated to a Procedures structure.
  The function release all the memory allocated to a Procedures structure. It goes through the Procedure elements and frees pointers in the elements.

*Parameters*:
  a   And two parameters. 
  b   Here's the second. 
*Returns*:
  And a return value!

---
|| [sfs Main Page] || [sfs_files Files] ||
